
package pl.polsl.lab.web.services.reference;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BTGWebService", targetNamespace = "http://services.web.lab.polsl.pl/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BTGWebService {


    /**
     * 
     * @param password
     * @param login
     * @throws MyException_Exception
     * @throws WSException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "register", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.RegisterResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/registerRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/registerResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/register/Fault/WSException"),
        @FaultAction(className = MyException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/register/Fault/MyException")
    })
    public void register(
        @WebParam(name = "login", targetNamespace = "")
        String login,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws MyException_Exception, WSException_Exception
    ;

    /**
     * 
     * @param userName
     * @return
     *     returns java.util.List<pl.polsl.lab.web.services.reference.UserList>
     * @throws MyException_Exception
     * @throws WSException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserList", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetUserList")
    @ResponseWrapper(localName = "getUserListResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetUserListResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/getUserListRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/getUserListResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getUserList/Fault/WSException"),
        @FaultAction(className = MyException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getUserList/Fault/MyException")
    })
    public List<UserList> getUserList(
        @WebParam(name = "userName", targetNamespace = "")
        String userName)
        throws MyException_Exception, WSException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<pl.polsl.lab.web.services.reference.ResultList>
     * @throws WSException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getResultList", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetResultList")
    @ResponseWrapper(localName = "getResultListResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetResultListResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/getResultListRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/getResultListResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getResultList/Fault/WSException")
    })
    public List<ResultList> getResultList()
        throws WSException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<pl.polsl.lab.web.services.reference.CalculationList>
     * @throws WSException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCalculationList", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetCalculationList")
    @ResponseWrapper(localName = "getCalculationListResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetCalculationListResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/getCalculationListRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/getCalculationListResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getCalculationList/Fault/WSException")
    })
    public List<CalculationList> getCalculationList()
        throws WSException_Exception
    ;

    /**
     * 
     * @param teamCount
     * @param userName
     * @return
     *     returns java.util.List<pl.polsl.lab.web.services.reference.BtResultRow>
     * @throws MyException_Exception
     * @throws WSException_Exception
     */
    @WebMethod(operationName = "CalculateBergerTable")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "CalculateBergerTable", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.CalculateBergerTable")
    @ResponseWrapper(localName = "CalculateBergerTableResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.CalculateBergerTableResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/CalculateBergerTableRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/CalculateBergerTableResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/CalculateBergerTable/Fault/WSException"),
        @FaultAction(className = MyException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/CalculateBergerTable/Fault/MyException")
    })
    public List<BtResultRow> calculateBergerTable(
        @WebParam(name = "teamCount", targetNamespace = "")
        Integer teamCount,
        @WebParam(name = "userName", targetNamespace = "")
        String userName)
        throws MyException_Exception, WSException_Exception
    ;

    /**
     * 
     * @param userName
     * @return
     *     returns java.util.List<pl.polsl.lab.web.services.reference.History>
     * @throws MyException_Exception
     * @throws WSException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getHistoryList", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetHistoryList")
    @ResponseWrapper(localName = "getHistoryListResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.GetHistoryListResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/getHistoryListRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/getHistoryListResponse", fault = {
        @FaultAction(className = MyException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getHistoryList/Fault/MyException"),
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/getHistoryList/Fault/WSException")
    })
    public List<History> getHistoryList(
        @WebParam(name = "userName", targetNamespace = "")
        String userName)
        throws MyException_Exception, WSException_Exception
    ;

    /**
     * 
     * @param password
     * @param login
     * @return
     *     returns java.lang.String
     * @throws WSException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkLogin", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.CheckLogin")
    @ResponseWrapper(localName = "checkLoginResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.CheckLoginResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/checkLoginRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/checkLoginResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/checkLogin/Fault/WSException")
    })
    public String checkLogin(
        @WebParam(name = "login", targetNamespace = "")
        String login,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws WSException_Exception
    ;

    /**
     * 
     * @param login
     * @throws WSException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "unRegister", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.UnRegister")
    @ResponseWrapper(localName = "unRegisterResponse", targetNamespace = "http://services.web.lab.polsl.pl/", className = "pl.polsl.lab.web.services.reference.UnRegisterResponse")
    @Action(input = "http://services.web.lab.polsl.pl/BTGWebService/unRegisterRequest", output = "http://services.web.lab.polsl.pl/BTGWebService/unRegisterResponse", fault = {
        @FaultAction(className = WSException_Exception.class, value = "http://services.web.lab.polsl.pl/BTGWebService/unRegister/Fault/WSException")
    })
    public void unRegister(
        @WebParam(name = "login", targetNamespace = "")
        String login)
        throws WSException_Exception
    ;

}
